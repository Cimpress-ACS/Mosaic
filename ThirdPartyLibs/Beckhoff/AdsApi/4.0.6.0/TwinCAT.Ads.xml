<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwinCAT.Ads</name>
    </assembly>
    <members>
        <member name="T:TwinCAT.Ads.AdsException">
            <summary>
            Base class for all exceptions thrown by this class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor(System.String)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">
            <summary>
            The exception that is thrown when a ADS datatype is not supported.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor(System.String)">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsInvalidNotificationException">
            <summary>
            This AdsInvalidNotificationException is created if the length of the notification data is 0.
            This indicates that the notification handle is not valid any more. This exception is passed 
            to the AdsNotificationErrorEvent.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsInvalidNotificationException.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes the class AdsInvalidNotificationException.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.Handle">
            <summary>
            Handle of the notification.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.TimeStamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorException">
            <summary>
            The exception that is thrown when a Ads error occurs.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsErrorException.ErrorCode">
            <summary>
            Gets the error code of the Exception.
            </summary>		
        </member>
        <member name="T:TwinCAT.Ads.Internal.PlcOpenTODConverter">
            <summary>
            Converter class for the PLCOpen TOD (TimeOfDay) Data type.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.PlcOpenTimeConverter">
            <summary>
            Converter class for the PLC Open TIME Data Type
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.PlcOpenDateConverterBase">
            <summary>
            Converter class base for PLCOpen DT and DATE types.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.PlcOpenDateConverter">
            <summary>
            Converter class for PlcOPen DATE data type
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsBinaryReader">
            <summary>
            Derives from BinaryReader and reads primitive as well as PLC data types as binary values. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.#ctor(TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsBinaryReader class based on the supplied stream.
            </summary>
            <param name="stream">A stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcString(System.Int32)">
            <summary>
            Reads a PLC string from the current stream.
            </summary>
            <param name="length">The length of the string in the PLC.</param>
            <returns>The string being read.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcDATE">
            <summary>
            Reads a PLC Date type from the current stream.
            </summary>
            <returns>The date being read.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcTIME">
            <summary>
            Reads a PLC Time type from the current stream.
            </summary>
            <returns>The time being read.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsBinaryWriter">
            <summary>
            Derives from BinaryWriter and writes primitive and PLC data types in binary to a stream.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.#ctor(TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsBinaryWriter class based on the supplied stream. 
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcString(System.String,System.Int32)">
            <summary>
            Writes a string as a PLC string to the current stream.
            </summary>
            <param name="value">The string to write to the stream.</param>
            <param name="length">The length of the string in the PLC.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcType(System.DateTime)">
            <summary>
            Writes a date as PLC date type to the current stream. 
            </summary>
            <param name="value">The date to write to the stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcType(System.TimeSpan)">
            <summary>
            Writes a time span as PLC time type to the current stream.
            </summary>
            <param name="value">The time span to write to the stream.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsStream">
            <summary>
            The class AdsStream is a stream class used for Ads communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor">
            <summary>
            Initializes a new instance of the AdsStream class. The instance has an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AdsStream class.
            </summary>
            <param name="length">Length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AdsStream class, based on the specified region of a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
            <param name="offset">The offset in buffer at which the stream begins.</param>
            <param name="length">The length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the AdsStream class, based on a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsStampHeader">
            <summary>
            This class implements an ADS Stamp Header containing multiple ADS Notification Samples.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsStampHeader.#ctor(System.Int64,System.UInt32)">
            <summary>
            Creates a new TcAdsStampHeader instance.
            </summary>
            <param name="timeStamp">The time stamp of this header in ns since 01/01/1601</param>
            <param name="numSamples">The number of notification samples contained in this header</param>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsStampHeader.TimeStamp">
            <summary>
            Get or set the time stamp of this header.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsStampHeader.NumSamples">
            <summary>
            Get the number of notification samples contained in this header.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsStampHeader.NotificationSamples">
            <summary>
            Get the array of notification samples contained in this header.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsNotificationSample">
            <summary>
            This class implements an ADS Notification Sample. It contains the notification handle and
            the variable data.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsNotificationSample.#ctor(System.UInt32)">
            <summary>
            Creates a new TcAdsNotificationSample instance.
            </summary>
            <param name="sampleSize">The size of the samples in bytes</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsNotificationSample.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new TcAdsNotificationSample instance.
            </summary>
            <param name="sampleSize">The size of the samples in bytes</param>
            <param name="notificationHandle">The notification handle of this sample</param>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsNotificationSample.NotificationHandle">
            <summary>
            Gets or sets the notification handle.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsNotificationSample.SampleSize">
            <summary>
            Gets the size of this sample in bytes.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsNotificationSample.SampleData">
            <summary>
            Gets the variable data buffer
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsServer">
            <summary>
            This class implements an ADS server. Derived classes should overwrite the indication methods
            to react on incoming requests. The confirmation methods should be overwritten to receive
            replies on ansychronous requests sent by this ADS server.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.#ctor(System.UInt16,System.String)">
            <summary>
            Create a new TcAdsServer instance with a fix ADS port number.
            </summary>
            <param name="port">The ADS server port for this server</param>
            <param name="portName">A string describing this ADS server</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.#ctor(System.String)">
            <summary>
            Create a new TcAdsServer instance with an ADS port number asigned by the local ADS router.
            </summary>
            <param name="portName">A string describing this ADS server</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.#ctor(System.UInt16,System.String,System.Boolean)">
            <summary>
            Create a new TcAdsServer instance with an ADS port number asigned by the local ADS router.
            Optional the TcAdsServer can be configured to use the overloaded TcAdsDeviceNotification-method to implement an own notification-parser.
            </summary>
            <param name="port">The ADS server poert for this server.</param>
            <param name="portName">A string descriving this ADS server.</param>
            <param name="useSingleNotificationHandler">Enables the overloaded TcAdsDeviceNotification-Method to implement an own notification-parser.</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.Connect">
            <summary>
            Connect this ADS server to the local ADS router.
            <exception cref="T:TwinCAT.Ads.Server.TcAdsServerException">Thrown if the connect call fails.</exception>	
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.Disconnect">
            <summary>
            Disconnects this ADS server from the local ADS router.
            <exception cref="T:TwinCAT.Ads.Server.TcAdsServerException">Thrown if the disconnect call fails.</exception>	
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadDeviceInfoReq(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Sends an ADS Read Device Info request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Sends an ADS Read Request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index group of the requested ADS service</param>
            <param name="cbLength">The number of bytes to be read</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Sends an ADS Write request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index group of the requested ADS service</param>
            <param name="cbLength">The number of bytes to be written</param>
            <param name="data">The data to be written</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadStateReq(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Sends an ADS Read State request.
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <returns>The ADS error code for this call.</returns>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteControlReq(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsState,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Sends an ADS Write Control request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="adsState">The requested new ADS state of the receiver</param>
            <param name="deviceState">The requested new ADS state of the receiver</param>
            <param name="cbLength">The length of the additional data buffer</param>
            <param name="data">An additional data buffer of cbLength bytes</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsAddDeviceNotificationReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,TwinCAT.Ads.AdsTransMode,System.UInt32,System.UInt32)">
            <summary>
            Sends an ADS Add Device Notification request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index group of the requested ADS service</param>
            <param name="cbLength">The number of bytes to be transmitted</param>
            <param name="transMode">The transmission mode of the notification (cyclic / on change)</param>
            <param name="maxDelay">The receiver should send the notification at least after maxDelay ms</param>
            <param name="cycleTime">The receiver shouldc check every cycleTime ms if the requested variable has changed</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDelDeviceNotificationReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32)">
            <summary>
            Sends an ADS Delete Device Notification request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="hNotification">The notifocation ID to be deleted</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDeviceNotificationReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,TwinCAT.Ads.Server.TcAdsStampHeader[])">
            <summary>
            Sends an ADS Device Notification request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="numStampHeaders">The number of ADS Stamp Headers to be sent</param>
            <param name="notificationHeaders">The array of ADS Stamp Headers to be sent</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadWriteReq(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Sends an ADS Read Write request.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invokeId for this call. Used to find the matching ADS Confirmation</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index group of the requested ADS service</param>
            <param name="cbReadLength">The number of bytes to be read</param>
            <param name="cbWriteLength">The number of bytes to be written</param>
            <param name="data">The data to be written</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadDeviceInfoCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.String,TwinCAT.Ads.AdsVersion)">
            <summary>
            Called when an ADS Read Device Info confirmation is received.
            Overwrite this method in derived classes to react on ADS Read Device Info confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="name">The sender's name</param>
            <param name="version">The sender's version</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Byte[])">
            <summary>
            Called when an ADS Read confirmation is received.
            Overwrite this method in derived classes to react on ADS Read confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="cbLength">The number of read bytes</param>
            <param name="data">The read data buffer</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called when an ADS Write confirmation is received.
            Overwrite this method in derived classes to react on ADS Write confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadStateCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState,System.UInt16)">
            <summary>
            Called when an ADS Read State confirmation is received.
            Overwrite this method in derived classes to react on ADS Read State confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="adsState">The ADS state of the sender</param>
            <param name="deviceState">The device state of the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteControlCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called when an ADS Write Control confirmation is received.
            Overwrite this method in derived classes to react on ADS Write Control confirmations. 
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsAddDeviceNotificationCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Called when an ADS Add Device Notification confirmation is received.
            Overwrite this method in derived classes to react on ADS Add Device Notification confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="notificationHandle">The notification handle provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDelDeviceNotificationCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called when an ADS Delete Device Notification confirmation is received.
            Overwrite this method in derived classes to react on ADS Delete Device Notification confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadWriteCon(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Byte[])">
            <summary>
            Called when an ADS Read Write confirmation is received.
            Overwrite this method in derived classes to react on ADS Read Write confirmations.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="cbLength">The  number of read bytes</param>
            <param name="data">The read data buffer</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadDeviceInfoRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.String,TwinCAT.Ads.AdsVersion)">
            <summary>
            Sends an ADS Read Device Info response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <param name="name">The name of this ADS server</param>
            <param name="version">The version of this ADS server</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Byte[])">
            <summary>
            Sends an ADS Read response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <param name="cbLength">The number of read bytes</param>
            <param name="data">The read data buffer</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Sends an ADS Write response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadStateRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState,System.UInt16)">
            <summary>
            Sends an ADS Read State response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <param name="adsState">The current ADS state of this ADS server</param>
            <param name="deviceState">The device state of this ADS server</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteControlRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Sends an ADS Write Control response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsAddDeviceNotificationRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Sends an ADS Add Device Notification response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <param name="handle">The notification handle for the added notification</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDelDeviceNotificationRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Sends an ADS Delete Device Notification response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadWriteRes(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Byte[])">
            <summary>
            Sends an ADS Read Write Response.
            </summary>
            <param name="rAddr">The receiver's AMS address</param>
            <param name="invokeId">The invoke ID provided by the receiver</param>
            <param name="result">The ADS error code for the response</param>
            <param name="cbLength">The number of read bytes</param>
            <param name="data">The read data buffer</param>
            <returns>The ADS error code for this call.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadDeviceInfoInd(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Called when an ADS Read Device Info indication is received.
            Overwrite this method in derived classes to react on ADS Read Device Info indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called when an ADS Read indication is received.
            Overwrite this method in derived classes to react on ADS Read indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index offset of the requested ADS service</param>
            <param name="cbLength">The number of bytes to be read</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Called when an ADS Write indication is received.
            Overwrite this method in derived classes to react on ADS Write indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index offset of the requested ADS service</param>
            <param name="cbLength">The number of bytes to be witten</param>
            <param name="data">The data to be written</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadStateInd(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Called when an ADS Read State indication is received.
            Overwrite this method in derived classes to react on ADS Read State indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsWriteControlInd(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsState,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Called when an ADS Write Control indication is received.
            Overwrite this method in derived classes to react on ADS Write Control indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="adsState">The requested new ADS state of this ADS device</param>
            <param name="deviceState">The requested new device state of this ADS device</param>
            <param name="cbLength">The length in bytes of the additional data buffer</param>
            <param name="pDeviceData">An additional data buffer of cbLength bytes</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsAddDeviceNotificationInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,TwinCAT.Ads.AdsTransMode,System.UInt32,System.UInt32)">
            <summary>
            Called when an ADS Add Device Notification indication is received.
            Overwrite this method in derived classes to react on ADS Add Device Notification indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index offset of the requested ADS service</param>
            <param name="cbLength">Number of bytes to be transmitted</param>
            <param name="transMode">The transmission mode of the notification (cyclic / on change)</param>
            <param name="maxDelay">The notification should be send at least after maxDelay ms</param>
            <param name="cycleTime">Check every cycleTime ms if the requested variable has changed</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDelDeviceNotificationInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32)">
            <summary>
            Called when an ADS Delete Device Notification indication is received.
            Overwrite this method in derived classes to react on ADS Delete Device Notification indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="hNotification">The notification handle to be deleted</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDeviceNotificationInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,TwinCAT.Ads.Server.TcAdsStampHeader[])">
            <summary>
            Called when an ADS Device Notification indication is received.
            Overwrite this method in derived classes to react on ADS Device Notification indications.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="numStapHeaders">The number of ADS Stamp Headers contained in stampHeaders</param>
            <param name="stampHeaders">The array of received ADS Stamp Headers.</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsDeviceNotificationInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,TwinCAT.Ads.AdsBinaryReader)">
            <summary>
            Called when an ADS Device Notification indication is received.
            Overwrite this method in derived classes to react on ADS Device Notification indications.
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="numStampHeaders">The number of stamp headers.</param>
            <param name="stampReader">Reader object for the stamps.</param>
        </member>
        <member name="M:TwinCAT.Ads.Server.TcAdsServer.AdsReadWriteInd(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Called when an ADS Read Write indication is received.
            Overwrite this method in derived classes to react on ADS Read Write indications.
            The default implementation replies with an ADS ServiceNotSupported error code (0x701).
            </summary>
            <param name="rAddr">The sender's AMS address</param>
            <param name="invokeId">The invokeId provided by the sender</param>
            <param name="indexGroup">The index group of the requested ADS service</param>
            <param name="indexOffset">The index offset of the requested ADS service</param>
            <param name="cbReadLength">Number of bytes to be read</param>
            <param name="cbWriteLength">Number of bytes to be written</param>
            <param name="data">The data to be written</param>
        </member>
        <member name="E:TwinCAT.Ads.Server.TcAdsServer.AdsServerException">
            <summary>
            Occurs if the receive thread has exited on an exception.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsServer.Address">
            <summary>
            The AMS address of this server.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsServer.IsConnected">
            <summary>
            The connection state of this server. True, if the server is connected to the router; false otherwise.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsServer.TcAdsServerExDelegate">
            <summary>
            Delegate for the AdsSeverException event.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsServerExEventArgs">
            <summary>
            This class implements the event arguments passed by the TcAdsServerExEvent.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsServerExEventArgs.Exception">
            <summary>
            Returns the exception that caused the event.
            </summary>
            <returns>The Exception that caused the event.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Server.TcAdsServerExEventArgs.Message">
            <summary>
            Returns the exception message.
            </summary>
            <returns>The Exception message.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Server.TcAdsServerException">
            <summary>
            A TcAdsServerException is thrown on communication errors in in TcAdsServer class.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IDataType">DataTypes.</see>
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1">
            <summary>
            Data type collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1">
            <summary>
            Data Type container interface
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1.ContainsType(System.String)">
            <summary>
            Determines whether the container contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/> from the <see cref="T:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type (Out parameter)</param>
            <returns>true if found</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.list">
            <summary>
            Internal list of data types
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.nameDict">
            <summary>
            Dictionary (Type Name --> DataType)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.IndexOf(`0)">
            <summary>
            Determines the Index of the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an <see cref="T:TwinCAT.TypeSystem.IDataType"/> into the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/>.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TwinCAT.TypeSystem.IDataType"/> object at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.ContainsType(System.String)">
            <summary>
            Determines whether the container contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="name">The name.</param>
            <returns>
            	<c>true</c> if contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/> from the <see cref="T:TwinCAT.TypeSystem.Generic.IDataTypeContainer`1"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type (Out parameter)</param>
            <returns>true if found</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.LookupType(System.String)">
            <summary>
            Determines the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <param name="name">The name.</param>
            <returns>
            The <see cref="T:TwinCAT.TypeSystem.IDataType"/> if found, otherwise <c>NULL</c>
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the data types to the specified array, starting at the array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Remove(`0)">
            <summary>
            Removes the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Count">
            <summary>
            Gets the count of contained <see cref="T:TwinCAT.TypeSystem.IDataType"/>s.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> class (Copy constructor).
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.AsReadOnly">
            <summary>
            Returns A ReadOnly-Version of the  <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.Clone">
            <summary>
            Clones this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> (Shallow Copy)
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection">
            <summary>
            ReadOnly Collection of <see cref="T:TwinCAT.TypeSystem.IDataType"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection.#ctor(TwinCAT.TypeSystem.DataTypeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection"/> class.
            </summary>
            <param name="dataType">Type of the data.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.MemberCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IMember"/> objects.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1">
            <summary>
            Base class for <see cref="T:TwinCAT.TypeSystem.IInstance"/> object collections (abstract).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.IInstanceCollection`1">
            <summary>
            Generic InstanceColleciton interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.IInstanceCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains an instance with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>
            	<c>true</c> if [contains] [the specified instance path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.IInstanceCollection`1.TryGetInstance(System.String,`0@)">
            <summary>
            Tries to get the specified instance.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.IInstanceCollection`1.TryGetInstanceByName(System.String,System.Collections.Generic.IList{`0}@)">
            <summary>
            Tries to get the specified instance by name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="symbols">The found symbols.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.IInstanceCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance"/> with the specified instance path.
            </summary>
            <value></value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1"/> class.
            </summary>
            <param name="coll">The copy collection</param>
            <param name="relativePath">if set to <c>true</c> the collection is using the relative path.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of the specified <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <see cref="T:TwinCAT.TypeSystem.IInstance"/> at the specified index.
            </summary>
            <param name="index">The instance.</param>
            <param name="instance">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TwinCAT.TypeSystem.IInstance"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items to this collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Contains(`0)">
            <summary>
            Determines whether this colleciton contains the specifie <see cref="T:TwinCAT.TypeSystem.IInstance"/>
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection conains an <see cref="T:TwinCAT.TypeSystem.IInstance"/> with the specified instancePath.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>
            	<c>true</c> if [contains] [the specified instance path]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.TryGetInstance(System.String,`0@)">
            <summary>
            Tries to get the <see cref="T:TwinCAT.TypeSystem.IInstance"/>. of the specified path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TwinCAT.TypeSystem.IInstance"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance"/> with the specified instance path.
            </summary>
            <value></value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Count">
            <summary>
            Gets the collection count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MemberCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IMember})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MemberCollection"/> class (copy constructor)
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.AsReadOnly">
            <summary>
            Returns a read only copy of this collection (shallow copy)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.Clone">
            <summary>
            Clones this <see cref="T:TwinCAT.TypeSystem.MemberCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection">
            <summary>
            Read only collection of <see cref="T:TwinCAT.TypeSystem.IMember"/> objects
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMemberCollection.#ctor(TwinCAT.TypeSystem.MemberCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection"/> class.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMemberCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IMember@)">
            <summary>
            Tries to get the specified member
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolCollection">
            <summary>
            Interface represents a collection of <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.SymbolCollection`1">
            <summary>
            Interface represents a collection of <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> class.
            </summary>
            <param name="coll">The collection to be copied.</param>
            <param name="relativePath">if set to <c>true</c> the collection will use the relative path.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.AsReadOnly">
            <summary>
            Returns a Read only version of this collection (shallow copy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.AsReadOnly">
            <summary>
            Returns a Read only version of this collection (shallow copy).
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlySymbolCollection">
            <summary>
            ReadOnly collection containing <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlySymbolCollection.#ctor(TwinCAT.TypeSystem.SymbolCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlySymbolCollection"/> class.
            </summary>
            <param name="symbols">The symbols.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.NamespaceCollection">
            <summary>
            Collection of Namespaces (internally using <see cref="T:TwinCAT.TypeSystem.Generic.INamespace`1"/>
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.NamespaceCollection`2">
            <summary>
            Generic class for Namspace collections
            </summary>
            <typeparam name="N"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`2.list">
            <summary>
            List of Namespaces
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`2.namespaceDict">
            <summary>
            Dictionary NamespaceName --> INamespace
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`2.allTypes">
            <summary>
            Dictionary FullPath -> IDataType
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.NamespaceCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.AsReadOnly">
            <summary>
            Creates a read-only version of this <see cref="T:TwinCAT.TypeSystem.NamespaceCollection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers a type on its namespace
            </summary>
            <param name="type">The type.</param>
            <remarks>Creates a new namspace if not existing in the collection.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection">
            <summary>
            ReadOnly namespace collection
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`2">
            <summary>
            Read Only namespace collection
            </summary>
            <typeparam name="N"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`2.#ctor(TwinCAT.TypeSystem.Generic.NamespaceCollection{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`2"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection.#ctor(TwinCAT.TypeSystem.NamespaceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RawValueConverter.BytesToObject(TwinCAT.TypeSystem.IDataType,System.Int32,System.Byte[])">
            <summary>
            Converts the specified Raw data to the appropriate typed value
            </summary>
            <param name="type">The type.</param>
            <param name="offset">The offset.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RawValueConverter.ObjectToBytes(TwinCAT.TypeSystem.IDataType,System.Object)">
            <summary>
            Converts the specified value to raw bytes
            </summary>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PrimitiveTypeConverter">
            <summary>
            Converts Primitive Types From/To Byte Arrays
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DynamicSymbols">
            <summary>
            Dynamic (Expandable) Symbols collection.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DynamicSymbols._symbols">
            <summary>
            Internal Symbol Collection
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbols.#ctor(TwinCAT.TypeSystem.SymbolCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DynamicSymbols"/> class.
            </summary>
            <param name="symbols">The symbols.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbols.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbols.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbols.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbols.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbols.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.TypeSystem.DynamicSymbol"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DynamicSymbol">
            <summary>
            Dynamic value (uses RuntimeBinding for <see cref="T:TwinCAT.TypeSystem.ISymbol"/> value reading / writing).
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbol">
            <summary>
            Interface specifying Symbols (
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IInstance">
            <summary>
            Inteface specifing instance objects.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IInstance"/> in bytes.
            </summary>
            <value>
            The size of the <see cref="T:TwinCAT.TypeSystem.IInstance"/> in bytes.
            </value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IProcessImageAddress">
            <summary>
            Interface describing a Process Image Address
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.IndexGroup">
            <summary>
            Gets the index group of the Symbol
            </summary>
            <value>The index group.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.IndexOffset">
            <summary>
            Gets the index offset of the Symbol
            </summary>
            <value>The index offset.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.Category">
            <summary>
            Gets the Symbol/Datatype Category
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.SubSymbols">
            <summary>
            Gets the SubSymbols of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>
            </summary>
            <remarks>Used for Array, Struct, Pointer and Reference instances. Otherwise empty
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is acontainer type.
            </summary>
            <value>
            	<c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is a primitive type.
            </summary>
            <value>
            	<c>true</c> if this instance is primitive type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DynamicSymbol._symbol">
            <summary>
            Symbol object <see cref="T:TwinCAT.Ads.TypeSystem.DynamicValue"/> is assigned to.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbol.#ctor(TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DynamicValue"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbol.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbol.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbol.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicSymbol.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/>[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.Symbol">
            <summary>
            Gets the static symbol object.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.HasValue">
            <summary>
            Gets a value indicating whether this instance has value (only the non VirtualInstances, what means the Symbols with locations).
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.NotificationSettings">
            <summary>
            Gets the notification settings.
            </summary>
            <value>The notification settings.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.SubSymbols">
            <summary>
            Gets the SubSymbols of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>
            </summary>
            <value></value>
            <remarks>Only used for Array and Struct instances. Otherwise empty
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.RawValue">
            <summary>
            Gets or sets the raw value of the Symbol (Ads Read / Write)
            </summary>
            <value>The raw value.</value>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.DynamicSymbol.RawValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.Value">
            <summary>
            Gets / Sets the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> (&gt;= .NET4, see remarks section for further explanations)
            </summary>
            <value>The value.</value>
            <remarks>Callin on primitive types, a call of this property will result in an immediate ADS Read/Write.</remarks>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.DynamicSymbol.ValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed (&gt;= .NET4)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.IndexGroup">
            <summary>
            Gets the index group of the Symbol
            </summary>
            <value>The index group.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.IndexOffset">
            <summary>
            Gets the index offset of the Symbol
            </summary>
            <value>The index offset.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicSymbol.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IInstance"/> in bytes.
            </summary>
            <value>
            The size of the <see cref="T:TwinCAT.TypeSystem.IInstance"/> in bytes.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Symbol">
            <summary>
            Symbol class
            </summary>
            <remarks>A Symbol is a (named) memory object within the Process Image with a fixed address indicated by Index Group and Index Offset.
            Symbols can optionally be addressed by instance path and are bound to a specific <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/>.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Instance">
            <summary>
            Instance implementation
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.AlignTypeName(System.String)">
            <summary>
            Aligns the type name
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.resolver">
            <summary>
            DataType resolver
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="subEntry">The sub entry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.typeName">
            <summary>
            Datatype name.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.resolvedDataType">
            <summary>
            Resolved / Cached Data Type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.TryResolveType">
            <summary>
            Tries to resolve the <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.comment">
            <summary>
            Instance comment.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.instanceName">
            <summary>
            Name of the instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.DataTypeResolver">
            <summary>
            Gets the data type resolver.
            </summary>
            <value>The data type resolver.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Namespace">
            <summary>
            Gets the namespace as sstring.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> in Bytes.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.ObsoleteDataTypeId">
            <summary>
            Only for internal use (obsolete)
            </summary>
            <value>The datatype.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Category">
            <summary>
            Gets the the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> of the Instance.
            </summary>
            <value>The category.</value>
            <remarks>Corresponds to the <see cref="P:TwinCAT.TypeSystem.IDataType.Category"/></remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDynamicSymbol.Value">
            <summary>
            Gets / Sets the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> (&gt;= .NET4, see remarks section for further explanations)
            </summary>
            <value>The value.</value>
            <remarks>Callin on primitive types, a call of this property will result in an immediate ADS Read/Write.</remarks>
        </member>
        <member name="E:TwinCAT.TypeSystem.IDynamicSymbol.ValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed (&gt;= .NET4)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.loader">
            <summary>
            Symbol loader
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.DataType,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.Int64,System.Int64,TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.DataType,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="parent">The parent.</param>
            <param name="type">The type.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.Int64,System.Int64,TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.DataType,System.String,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="parent">The parent.</param>
            <param name="type">The type.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="parent">The parent.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.Ads.TypeSystem.StructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.Int32[],TwinCAT.Ads.TypeSystem.ArrayInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class.
            </summary>
            <param name="indices">The indices.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol._notificationSettings">
            <summary>
            Gets or sets the notification settings.
            </summary>
            <value>The notification settings.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnRegisterNotification(System.EventHandler{TwinCAT.TypeSystem.RawValueChangedArgs},TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Registers a Notification for RawValues
            </summary>
            <param name="value">The value.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnUnregisterNotification(System.EventHandler{TwinCAT.TypeSystem.RawValueChangedArgs})">
            <summary>
            Unregisters a Notification for RawValues
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnUnregisterNotification(System.EventHandler{TwinCAT.TypeSystem.ValueChangedArgs})">
            <summary>
            Unregisters a Notifcation for a Dynamic VAlue
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnRegisterNotification(System.EventHandler{TwinCAT.TypeSystem.ValueChangedArgs},TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Registers a Notification for a Dynamic Value
            </summary>
            <param name="handler">The handler.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.NotificationSettings">
            <summary>
            Gets or sets the notification settings.
            </summary>
            <value>The notification settings.</value>
            <remarks>The <see cref="P:TwinCAT.Ads.TypeSystem.Symbol.NotificationSettings"/> will be inherited from <see cref="P:TwinCAT.Ads.TypeSystem.Symbol.Parent"/> if the setting is not overwritten.
            If the Root Symbol also doesn't contain the settings, then the <see cref="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.DefaultNotificationSettings"/> will be returned.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.RawValue">
            <summary>
            Gets or sets the raw value (Ads Read/Write)
            </summary>
            <value>The raw value.</value>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.Symbol.RawValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.Symbol.ValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed (&gt;= .NET4)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.Value">
            <summary>
            Gets or sets the value (dynamically)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value>
            	<c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StructInstance">
            <summary>
            Class representing a Struct Instance
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStructInstance">
            <summary>
            Interface representing an instance of a <see cref="T:TwinCAT.TypeSystem.IStructType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStructInstance.MemberInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.StructType,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="resolver">The resolver.</param>
            <param name="symbolLoader">The symbol loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.String,TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="parent">The parent.</param>
            <param name="resolver">The resolver.</param>
            <param name="symbolLoader">The symbol loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.String,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="resolver">The resolver.</param>
            <param name="symbolLoader">The symbol loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.Ads.TypeSystem.StructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.createSubSymbols">
            <summary>
            Creates the sub symbols.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IReferenceInstance">
            <summary>
            Interface representing an instance of an <see cref="T:TwinCAT.TypeSystem.IReferenceType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceInstance.Reference">
            <summary>
            Gets the resolved reference of Pointer / Refernece
            </summary>
            <value>
            The reference.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.ReferenceType,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="resolver">The resolver.</param>
            <param name="symbolLoader">The symbol loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.Ads.TypeSystem.StructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.IPointerInstance">
            <summary>
            Interface representing an instance of an <see cref="T:TwinCAT.TypeSystem.IPointerType"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.PointerType,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="resolver">The resolver.</param>
            <param name="symbolLoader">The symbol loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.Ads.TypeSystem.StructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayInstance">
            <summary>
            Implementation of the <see cref="T:TwinCAT.TypeSystem.IArrayInstance"/>.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IArrayInstance">
            <summary>
            Interface representing an array instance
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayInstance.Elements">
            <summary>
            Gets the contained Array Elements as read only collection.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.Ads.TypeSystem.ArrayType,TwinCAT.Ads.TypeSystem.ITypeBinder,TwinCAT.Ads.TypeSystem.ISymbolValueLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="resolver">The resolver.</param>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.Ads.TypeSystem.StructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent instance.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(System.Int32[],TwinCAT.Ads.TypeSystem.ArrayInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.CheckIndices(System.Int32[])">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/>
            </summary>
            <param name="indices">Indices</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.Elements">
            <summary>
            Gets the contained Array Elements as read only collection.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SymbolIterator">
            <summary>
            Symbol iterator object
            </summary>
            <remarks>Iterates over all root symbols and its subsymbols.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolIterator.#ctor(TwinCAT.TypeSystem.ISymbolProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolIterator"/> class.
            </summary>
            <param name="provider">The Symbol provider.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolIterator.GetEnumerator">
            <summary>
            Gets the enumerator that enumerates through a collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolIterator.IterateArrayElements">
            <summary>
            Gets or sets a value indicating whether the iterator returns also instances of Array elements (default: true)
            </summary>
            <value>
            	<c>true</c> if [iterate array elements]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolIterator.IterateStructMembers">
            <summary>
            Gets or sets a value indicating whether the iterator returns also members of structs (default: true)
            </summary>
            <value>
            	<c>true</c> if [iterate struct members]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ITypeBinder">
            <summary>
            The ITypeBinder interface binds DataTypes and Symbols to its namespace.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ITypeBinder.Register(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ITypeBinder.TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ITypeBinder.Bind(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Binds the specified symbol to the Resolver (Registering and linking Parents).
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ITypeBinder.RootNamespaceName">
            <summary>
            Gets the root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ITypeBinder.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DataType">
            <summary>
            DataType class
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataType">
            <summary>
            Base inteface for objects representing data types
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Id">
            <summary>
            Gets the ID of the DataType
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Category">
            <summary>
            Gets the Data Type category
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Name">
            <summary>
            Gets the name of the Data Type (without namespace)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Namespace">
            <summary>
            Gets the namespace string within the <see cref="T:TwinCAT.TypeSystem.IDataType"/> exists.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.FullName">
            <summary>
            Gets the full name of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> (Namespace + Name)
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.
            </summary>
            <value>The size of <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is primitive
            </summary>
            <value>
            	<c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsContainer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <remarks>Container Types are Array, Structs and its derivates (Function,FunctionBlock and Program)</remarks>
            <value>
            	<c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bytes.
            </summary>
            <value>he size of <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bytes.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsPointer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a pointer type
            </summary>
            <remarks>Pointer types can be dereferenced with the '^' operator.</remarks>
            <value>
            	<c>true</c> if this instance is pointer type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsReference">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a reference type
            </summary>
            <remarks>Reference types can be dereferences.</remarks>
            <value>
            	<c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.IsContainerType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a container type.
            </summary>
            <param name="cat">The data type category.</param>
            <remarks>Container Types are Array, Structs and its derivates (Function,FunctionBlock and Program)
            </remarks>
            <returns>
            	<c>true</c> if [is container type] [the specified cat]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.IsReferenceType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a reference type.
            </summary>
            <param name="cat">The data type category.</param>
            <returns>
            	<c>true</c> if [is reference type] [the specified cat]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.IsPointerType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a pointer type.
            </summary>
            <param name="cat">The data type category.</param>
            <returns>
            	<c>true</c> if [is pointer type] [the specified cat]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.IsPrimitiveType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a primitive type
            </summary>
            <param name="cat">The cat.</param>
            <returns>
            	<c>true</c> if [is primitive type] [the specified cat]; otherwise, <c>false</c>.
            </returns>
            <remarks>Primitive types are types that are indicated with Primitive, String, SubRange, Enum, Pointer
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Size">
            <summary>
            Gets the Size of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> in Bytes
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is primitive
            </summary>
            <value>
            	<c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsContainer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <value>
            	<c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsReference">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a reference type
            </summary>
            <value>
            	<c>true</c> if this instance is reference type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsPointer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a pointer type
            </summary>
            <value>
            	<c>true</c> if this instance is pointer type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumType">
            <summary>
            Interface representing an enum type
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AliasType">
            <summary>
            Alias DataType
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAliasType">
            <summary>
            Interface representing an Alias Type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IAliasType.BaseTypeName">
            <summary>
            Gets the BaseType name
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IAliasType.BaseType">
            <summary>
            Gets the Base Type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AliasType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.#ctor(System.String,TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AliasType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.BaseTypeName">
            <summary>
            Gets the BaseType name
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.BaseType">
            <summary>
            Gets the Base Type
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is primitive
            </summary>
            <value>
            <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.IsContainer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <value>
            <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StringType">
            <summary>
            String DataType
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStringType">
            <summary>
            Interface representing a string <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringType.Length">
            <summary>
            Gets the number of characters within the string.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringType.#ctor(System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringType"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringType.Length">
            <summary>
            Gets the number of characters within the string.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.WStringType">
            <summary>
            Represents an Unicode string (Wide string)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.WStringType.#ctor(System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.WStringType"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.WStringType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.WStringType.Length">
            <summary>
            Gets the number of characters within the string.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StructType">
            <summary>
            Represents a struct type
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStructType">
            <summary>
            Interface representing Struct data types
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStructType.Members">
            <summary>
            Gets a readonly collection of the <see cref="T:TwinCAT.TypeSystem.IMember">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IStructType"/>.
            </summary>
            <value>The members as readonly collection.</value>
            <remarks>If the <see cref="T:TwinCAT.TypeSystem.IStructType"/> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IStructType.AllMembers"/> property.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStructType.BaseTypeName">
            <summary>
            Gets the the Name of the Base class (if derived)
            </summary>
            <value>Empty if not derived.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStructType.BaseType">
            <summary>
            Gets the structs Base Type (Null if not derived).
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStructType.AllMembers">
            <summary>
            Gets all members (down the derivation hieararchy)
            </summary>
            <value>All members.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.IsDerived">
            <summary>
            Gets a value indicating whether this instance is derived.
            </summary>
            <value>
            <c>true</c> if this instance is derived; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.Members">
            <summary>
            Gets a readonly collection of the <see cref="T:TwinCAT.TypeSystem.IMember">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IStructType"/>.
            </summary>
            <value>
            The members as readonly collection.
            </value>
            <remarks>
            If the <see cref="T:TwinCAT.TypeSystem.IStructType"/> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IStructType.AllMembers"/> property.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.BaseTypeName">
            <summary>
            Gets the the Name of the Base class (if derived)
            </summary>
            <value>
            Empty if not derived.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.BaseType">
            <summary>
            Gets the structs Base Type (Null if not derived).
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.AllMembers">
            <summary>
            Gets all members (down the derivation hieararchy)
            </summary>
            <value>
            All members.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ReferenceType">
            <summary>
            Represents a reference type
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IReferenceType">
            <summary>
            Interface representing a reference type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>The type of the referenced.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(System.String,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(System.String,System.String,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PointerType">
            <summary>
            Represents a pointer type.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IPointerType">
            <summary>
            Interface representing a pointer type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.CreatePVOID(System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Creates the PVOID.
            </summary>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">size;Pointer size not valid!</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(System.String,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder,System.Type)">
            <summary>
            Prevents a default instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> class from being created.
            </summary>
            <param name="name">The name.</param>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <param name="dotnetType">Type of the dotnet.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(System.String,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> class.
            </summary>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(System.String,System.String,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="size">The size.</param>
            <param name="resolver">The resolver.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,System.String,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SubRangeType">
            <summary>
            Represents a SubRangType
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISubRangeType">
            <summary>
            Interface representing a SubRange type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType.BaseType">
            <summary>
            Gets the the base type.
            </summary>
            <value>The type of the referenced.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType.LowerBound">
            <summary>
            Gets the lower bound.
            </summary>
            <value>The lower bound.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType.ElementCount">
            <summary>
            Gets the element count.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType.#ctor(System.String,System.Int32,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SubRangeType"/> class.
            </summary>
            <param name="baseType">Type of the base.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType.#ctor(System.String,System.String,System.Int32,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SubRangeType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,System.String,System.Int32,System.Int32,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SubRangeType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="baseType">Type of the base.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType.BaseType">
            <summary>
            Gets the the base type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType.LowerBound">
            <summary>
            Gets the lower bound.
            </summary>
            <value>
            The lower bound.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType.ElementCount">
            <summary>
            Gets the element count.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Member">
            <summary>
            Represents a member of an <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IMember">
            <summary>
            Specifies a single field/member of a <see cref="T:TwinCAT.TypeSystem.IStructType">Struct DataType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMember.BitOffset">
            <summary>
            Gets the bit offset of the single <see cref="T:TwinCAT.TypeSystem.IMember"/>.
            </summary>
            <value>The bit offset.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMember.ParentType">
            <summary>
            Gets the Parent Struct of this <see cref="T:TwinCAT.TypeSystem.IMember"/>.
            </summary>
            <value>The type of the parent.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Member.#ctor(TwinCAT.Ads.TypeSystem.StructType,TwinCAT.Ads.Internal.AdsDatatypeEntry,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="subEntry">The sub entry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.BitOffset">
            <summary>
            Gets the bit offset of the single <see cref="T:TwinCAT.TypeSystem.IMember"/>.
            </summary>
            <value>
            The bit offset.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.ParentType">
            <summary>
            Gets the Parent Struct of this <see cref="T:TwinCAT.TypeSystem.IMember"/>.
            </summary>
            <value>
            The type of the parent.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Dimension">
            <summary>
            Represents a single dimension of an <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/>
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDimension">
            <summary>
            Interface represening a single <see cref="T:TwinCAT.TypeSystem.IDimension">Dimension</see> of an <see cref="T:TwinCAT.TypeSystem.IArrayType">ArrayType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimension.ElementCount">
            <summary>
            Gets the number of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimension.LowerBound">
            <summary>
            Gets the lower bound of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>The lower bound.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Dimension.#ctor(TwinCAT.Ads.Internal.AdsDatatypeArrayInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Dimension"/> class.
            </summary>
            <param name="arrayInfo">The array info.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Dimension.LowerBound">
            <summary>
            Gets the lower bound of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>
            The lower bound.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Dimension.ElementCount">
            <summary>
            Gets the number of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayType">
            <summary>
            Represents an Array DataType
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IArrayType">
            <summary>
            Interface representing an array <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(TwinCAT.Ads.Internal.AdsDatatypeEntry,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.CheckIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/>
            </summary>
            <param name="indices">Indices</param>
            <param name="type">ArrayType</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.AreIndicesValid(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/>
            </summary>
            <param name="indices">Indices</param>
            <param name="type">ArrayType</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.CheckIndices(System.Int32[])">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/>
            </summary>
            <param name="indices">Indices</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementPosition(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Gets the element position within a flattened multidimensional array
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns>The Position-Index within the Elements collection of the Array instance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementPosition(System.Int32[])">
            <summary>
            Gets the element position within a flattened multidimensional array
            </summary>
            <param name="indices">The indices.</param>
            <returns>
            The Position-Index within the Elements collection of the array
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementByteOffset(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Gets the element byte offset.
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementTypeName">
            <summary>
            Gets the name of the element type.
            </summary>
            <value>
            The name of the element type.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>
            The type of the element.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>
            The dimensions.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.DimensionCount">
            <summary>
            Gets the dimension count.
            </summary>
            <value>
            The dimension count.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementCount">
            <summary>
            Gets the element count.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementSize">
            <summary>
            Gets the byte-size of a single element of the array
            </summary>
            <value>The size of the element.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Namespace">
            <summary>
            Namespace object.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.INamespace`1">
            <summary>
            Namespace interface
            </summary>
            <typeparam name="T">DataType class used within this Namespace interface</typeparam>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.INamespace`1.Name">
            <summary>
            Gets the name/ identifier of the Namespace
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.INamespace`1.DataTypes">
            <summary>
            Data types organized by the <see cref="T:TwinCAT.TypeSystem.Generic.INamespace`1"/>
            </summary>
            <value>The data types.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Namespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Namespace"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Namespace.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the the specified <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Namespace.Name">
            <summary>
            Gets the name of the namespace.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Namespace.DataTypes">
            <summary>
            Gets the data types organized by this <see cref="T:TwinCAT.Ads.TypeSystem.Namespace"/>
            </summary>
            <value>The data types.</value>
        </member>
        <member name="M:TwinCAT.Ads.DataTypeStringParser.TryParseString(System.String,System.Int32@)">
            <summary>
            Tries to parse the string.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="length">The character count of the string (not including the /0)</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SymbolParser">
            <summary>
            Class parsing Symbols from String or from AdsStream
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolParser.ParseTypes(TwinCAT.Ads.AdsStream,TwinCAT.Ads.TypeSystem.ITypeBinder)">
            <summary>
            Parses the the data types within the specified stream.
            </summary>
            <param name="dataTypeStream">The data type stream.</param>
            <param name="typeBinder">The type binder.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ISymbolProvider`3">
            <summary>
            Symbol provider interface
            </summary>
            <typeparam name="N">Namespace type</typeparam>
            <typeparam name="T">DataType type</typeparam>
            <typeparam name="S">Symbol type</typeparam>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.Namespaces">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly colleciton of the namespaces.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.ImageBaseAddress">
            <summary>
            Gets the image base address.
            </summary>
            <value>The image base address.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.RootNamespaceName">
            <summary>
            Gets the name of the root namespace
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.RootNamespace">
            <summary>
            Gets the root (main) namespace of the Symbol provider.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.Symbols">
            <summary>
            Gets the (root) symbols of the Symbol provider.
            </summary>
            <value>Readonly collection of the Symbols</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ISymbolLoader">
            <summary>
            Symbol Loader interface
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolProvider">
            <summary>
            Symbol Provider interface.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolLoader.Reset">
            <summary>
            Resets this loader (reinitialization)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.BuildInTypes">
            <summary>
            Gets the build in types.
            </summary>
            <value>The build in types.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.DataTypeCount">
            <summary>
            Gets the data type count (provided by the target)
            </summary>
            <value>The data type count.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.MaxDynamicSymbolCount">
            <summary>
            Gets the maximum of the dynamic symbols.
            </summary>
            <value>The max dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.SymbolCount">
            <summary>
            Gets the symbol count provided by the <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolLoader"/>.
            </summary>
            <value>The symbol count.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.UsedDynamicSymbolCount">
            <summary>
            Gets the count of used dynamic symbols.
            </summary>
            <value>The used dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolLoader.DefaultNotificationSettings">
            <summary>
            Gets/Sets the default notification settings for this <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolValueLoader"/>.
            </summary>
            <value>The default notification settings.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IDynamicSymbolLoader.SymbolsDynamic">
            <summary>
            Gets the symbols (late bound as dynamic objects)
            </summary>
            <value>The dynamic symbols.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ISymbolValueLoader">
            <summary>
            Value loader interface
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.TryReadValue(TwinCAT.TypeSystem.IProcessImageAddress,System.Byte[]@,TwinCAT.Ads.AdsErrorCode@)">
            <summary>
            Try to read value
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="value">The value.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.TryReadArrayElementValue(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Byte[]@,TwinCAT.Ads.AdsErrorCode@)">
            <summary>
            Try to read Array Element Value
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.TryWriteValue(TwinCAT.TypeSystem.IProcessImageAddress,System.Byte[],System.Int32,TwinCAT.Ads.AdsErrorCode@)">
            <summary>
            Try to Write value
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.TryWriteArrayElementValue(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Byte[],System.Int32,TwinCAT.Ads.AdsErrorCode@)">
            <summary>
            Try to write element value.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
            <param name="offset">The offset.</param>
            <param name="error">The error.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Adds the symbol value changed handler.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Removes the symbol value changed handler.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ISymbolValueLoader.TryGetNotificationSettings(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.NotificationSettings@)">
            <summary>
            Tries to get the current Notification Settings for the specified Symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
            <returns>true, if already a notfication for this symbol is registered. False if not.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.NotificationSettings">
            <summary>
            Notification communication settings
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.NotificationSettings._default">
            <summary>
            Default
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.NotificationSettings.#ctor(TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.NotificationSettings"/> class.
            </summary>
            <param name="mode">The mode.</param>
            <param name="cylceTime">The cylce time.</param>
            <param name="maxDelay">The max delay.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.NotificationSettings.CompareTo(TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Compares this <see cref="T:TwinCAT.Ads.TypeSystem.NotificationSettings"/> in term of priorities to the other <see cref="T:TwinCAT.Ads.TypeSystem.NotificationSettings"/>.
            </summary>
            <param name="other">The other.</param>
            <returns>1: this has higher priority (shorter times), 0: Equal, 1: Lower prioritiy</returns>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.NotificationSettingsPriorityComparer"/> 
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.NotificationSettings.Default">
            <summary>
            Gets the default Settings
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.NotificationSettings.NotificationMode">
            <summary>
            Gets or sets the notification mode.
            </summary>
            <value>The notification mode.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.NotificationSettings.CycleTime">
            <summary>
            Gets or sets the cycle time.
            </summary>
            <value>The cycle time.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.NotificationSettings.MaxDelay">
            <summary>
            Gets or sets the max delay.
            </summary>
            <value>The max delay.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.NotificationSettingsPriorityComparer">
            <summary>
            Compares two <see cref="T:TwinCAT.Ads.TypeSystem.NotificationSettings"/> for Priorirty.
            </summary>
            <remarks>
            Checks (prioritized):
            1. <see cref="P:TwinCAT.Ads.TypeSystem.NotificationSettings.NotificationMode"/>
            2. <see cref="P:TwinCAT.Ads.TypeSystem.NotificationSettings.CycleTime"/>
            3. <see cref="P:TwinCAT.Ads.TypeSystem.NotificationSettings.MaxDelay"/>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.NotificationSettingsPriorityComparer.Compare(TwinCAT.Ads.TypeSystem.NotificationSettings,TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SymbolLoader">
            <summary>
            The class TcAdsSymbolInfoLoader is responsible for downloading the list of declared variables from an ADS Server.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.#ctor(TwinCAT.Ads.TcAdsClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolLoader"/> class.
            </summary>
            <param name="adsClient">The ads client.</param>
            <param name="virtualInstances">if set to <c>true</c> [virtual instances].</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.Reset">
            <summary>
            Resets the cache-contents of this loader.
            </summary>
            <remarks>Accessing the data members will force AdsReads in the following.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ITypeBinder#Register(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ITypeBinder#TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ITypeBinder#Bind(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Binds the specified symbol to the Resolver (Registering and linking Parents).
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ISymbolValueLoader#TryReadValue(TwinCAT.TypeSystem.IProcessImageAddress,System.Byte[]@,TwinCAT.Ads.AdsErrorCode@)">
            <summary>
            Reads a value from the specified ADS address
            </summary>
            <param name="address">The address.</param>
            <param name="value">Raw value</param>
            <param name="error">The error.</param>
            <returns>true: succeeded; false: failed</returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.SymbolLoader._notificationHandleDict">
            <summary>
            Notification Handle --> Symbol
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.SymbolLoader._notificationSymbolDict">
            <summary>
            Symbol --> Notification Handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.SymbolLoader._notificationSettingsDict">
            <summary>
            Notification handle --> Notification settings
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ISymbolValueLoader#OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.NotificationSettings)">
            <summary>
            Registers a Notification on the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
            <remarks>Only one Notification is allowed on the symbol. On case of double announcement, we set the Notificaiton parameters
            to the higher priority.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.TwinCAT#Ads#TypeSystem#ISymbolValueLoader#OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Unregisters a Notification from the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoader.loadData">
            <summary>
            Loads the data types and symbols into the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolLoader"/>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.DataTypeCount">
            <summary>
            Gets the amount of data types used in the target.
            </summary>
            <value>The data type count.</value>
            <remarks>This poperty can be used, before uploading all data types and symbols.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.SymbolCount">
            <summary>
            Gets the amount of symbols used by the target.
            </summary>
            <value>The symbol count.</value>
            <remarks>This poperty can be used, before uploading all data types and symbols.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.MaxDynamicSymbolCount">
            <summary>
            Gets the maxmial amount of Dynamic symbols of the target system.
            </summary>
            <value>The max dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.UsedDynamicSymbolCount">
            <summary>
            Gets the used dynamic symbols by the target system.
            </summary>
            <value>The used dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.BuildInTypes">
            <summary>
            Gets the build in types.
            </summary>
            <value>The build in types.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.ImageBaseAddress">
            <summary>
            Gets the base Address of the accessed Process image.
            </summary>
            <value>The image base address.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.RootNamespaceName">
            <summary>
            Gets the root namespace name of the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolLoader"/>.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.Symbols">
            <summary>
            Gets the (root) symbols of the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolLoader"/> as ReadOnly collection.
            </summary>
            <value>The symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.Namespaces">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly colleciton of the namespaces.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.RootNamespace">
            <summary>
            Gets the root (main) namespace of the Symbol provider.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.SymbolsDynamic">
            <summary>
            Gets the dynamic Symbols
            </summary>
            <value>The dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SymbolLoader.DefaultNotificationSettings">
            <summary>
            Gets or sets the NotificationSettings that are used for Notification Defaults.
            </summary>
            <value>The default notification settings.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ServerCycleNotificationMngt">
            <summary>
            Summary description for NotificationMngt.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DatatypeInfoTable.GetDefaultTypes">
            <summary>
            Gets the default types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.TcAdsDllWrapper.TcAdsDll.AdsGetDllVersion">
            TcAdsDll-Api Functions
        </member>
        <member name="T:TwinCAT.Ads.Internal.AmsAddressInternal">
            <summary>
            Ams/Ads Address
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsAddress">
            <summary>
            Ams/Ads Address
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor">
            <summary>
            Protected constructur
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsAddress)">
            <summary>
            Copy constructor
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId">Net Id</param>
            <param name="port">Port</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Equality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Operator==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Inequality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Operator-=
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.ToString">
            <summary>
            Converts the Address to String 'NetId:Port'
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Parse(System.String)">
            <summary>
            Parses a string to an <see cref="T:TwinCAT.Ads.AmsAddress"/> object.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.TryParse(System.String,TwinCAT.Ads.AmsAddress@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.Ads.AmsAddress"/> from string.
            </summary>
            <param name="str">The STR.</param>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.NetId">
            <summary>
            Gets the NetId
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.Port">
            <summary>
            Gets the Port number
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetId">
            <summary>
            AMS/ADS Net ID
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(TwinCAT.Ads.AmsNetId)">
            <summary>
            Copy Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToString">
            <summary>
            Converts the netId to string
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBytes">
            <summary>
            Converts the NetId object to byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Clone">
            <summary>
            Clones the NetId
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetNetIdString(System.Byte[])">
            <summary>
            Gets the netId string from the byte array
            </summary>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetNetId(System.String)">
            <summary>
            Gets the net Id as byte array
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryParse(System.String,TwinCAT.Ads.AmsNetId@)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <param name="str"></param>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Parse(System.String)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.FromBinHexString(System.String)">
            <summary>
            Creates the <see cref="T:TwinCAT.Ads.AmsNetId"/> from bin hex string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex(TwinCAT.Ads.AmsNetId)">
            <summary>
            Converts the specified <see cref="T:TwinCAT.Ads.AmsNetId"/> to a BinHex string.
            </summary>
            <param name="netId">NetId to convert</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex">
            <summary>
            Converts the <see cref="T:TwinCAT.Ads.AmsNetId"/> to a BinHex string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares the NetIds
            </summary>
            <param name="netId1"></param>
            <param name="netId2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[])">
            <summary>
            Compares the netIds
            </summary>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsSameTarget(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the <see cref="T:TwinCAT.Ads.AmsNetId"/>s refer to the same target.
            </summary>
            <param name="netIDA">NetID of target system A</param>
            <param name="netIDB">NetID of target system B</param>
            <returns>
            	<c>true</c> if the target systems are the same, otherwise <c>false</c>.
            </returns>
            <remarks>In comparison to the <see cref="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)"/> or <see cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)"/> methods, this Method alse
            checks against the LocalHost ID, which means that <see cref="P:TwinCAT.Ads.AmsNetId.LocalHost"/> is the same target as <see cref="P:TwinCAT.Ads.AmsNetId.Local"/></remarks>
            <seealso cref="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)"/>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the specified <see cref="T:TwinCAT.Ads.AmsNetId"/>s are equal.
            </summary>
            <param name="netIDA">The net IDA.</param>
            <param name="netIDB">The net IDB.</param>
            <returns>
            	<c>true</c> if the specified net IDA is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Equality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Operator==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Inequality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Operator-=
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsLocal">
            <summary>
            Is the Address Local?
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Empty">
            <summary>
            Creates an empty NetId ("0.0.0.0.0.0")
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.LocalHost">
            <summary>
            Creates the local NetId ("127.0.0.1.1.1")
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Local">
            <summary>
            Gets the Local Net ID (System service must be running)
            </summary>
            <remarks>The system service must be running
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetIdConverter">
            <summary>
            Type Converter class for the <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.StateInfo">
            <summary>
            The structure contains the Ads state and device state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.#ctor(TwinCAT.Ads.AdsState,System.Int16)">
            <summary>
            Initializes a new Instance of the StateInfo struct.
            </summary>
            <param name="adsState">Ads state.</param>
            <param name="deviceState">Device state.</param>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.AdsState">
            <summary>
            Gets or sets the Ads state.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.DeviceState">
            <summary>
            Gets or sets the device state.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.DeviceInfo">
            <summary>
            The structure contains the name and the version information of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Name">
            <summary>
            Gets or sets the name of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Version">
            <summary>
            Gets or sets the vesion information.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsVersion">
            <summary>
            The structure contains the version number, revision number and build number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Version">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Revision">
            <summary>
            Gets or sets the revision number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Build">
            <summary>
            Gets or sets the build number.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsTransMode">
            <summary>
            Determines at what time the AdsSyncNotification-Event is fired.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.None">
            <summary>
            No AdsSyncNotification-Event is fired (ADSTRANS_NOTRANS = 0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.ClientCycle">
            <summary>
            The AdsSyncNotification-Event is fired cyclically triggered by the client (ADSTRANS_CLIENTCYCLE=1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.ClientOnChange">
            <summary>
            The AdsSymcNotification-Event is fired when data changes triggered by the client. (ADSTRANS_CLIENTONCHA = 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.Cyclic">
            <summary>
            The AdsSyncNotification-Event is fired cyclically (ADSTRANS_SERVERCYCLE = 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.OnChange">
            <summary>
            The AdsSyncNotification-Event is fired when the data changes (ADSTRANS_SERVERONCHA = 4)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicInContext">
            <summary>
            The AdsSyncNotification-Event is fired cyclically within the given context (ADSTRANS_SERVERCYCLE2 = 5)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext">
            <summary>
            The AdsSyncnotification-Event is fired when the data changes within the given context (ADSTRANS_SERVERONCHA2 = 6)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterState">
            <summary>
            State of the Ams Router.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Stop">
            <summary>
            Ams Router is stopped.
            </summary>	
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Start">
            <summary>
            Ams Router is started.
            </summary>			
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Removed">
            <summary>
            Ams Router has been removed.
            </summary>					
        </member>
        <member name="T:TwinCAT.Ads.AmsPort">
            <summary>
            AmsPorts
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Router">
            <summary>
            AmsRouter (Port 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Debugger">
            <summary>
            AmsDebugger (Port 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Logger">
            <summary>
            Logger (Port 100)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLog">
            <summary>
            Event Logger (Port 110)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Realtime">
            <summary>
            R0 Realtime (Port 200)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Trace">
            <summary>
            R0 Trace (Port 290)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_IO">
            <summary>
            R0 IO (Port 300)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NC">
            <summary>
            NC (R0) (Portt 500)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSAF">
            <summary>
            R0 Satzausführung (Port 5019
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSVB">
            <summary>
            R0 Satzvorbereitung (Port 511)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_ISG">
            <summary>
            R0 ISG (Port 550)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CNC">
            <summary>
            R0 CNC (Port 600)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_LINE">
            <summary>
            R0 Line (Port 700)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_PLC">
            <summary>
            R0 PLC (Port 800)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime1">
            <summary>
            PLC RuntimeSystem 1 (Port 801)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime2">
            <summary>
            PLC RöuntimeSystem 2 (Port 811)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime3">
            <summary>
            PLC RuntimeSystem 3 (Port 821)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime4">
            <summary>
            PLC RuntimeSystem 4 (Port 831)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.CamshaftController">
            <summary>
            Camshaft Controller (R0) (Port 900)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CAMTOOL">
            <summary>
            R0 CAM Tool (Port 950)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_USER">
            <summary>
            R0 User (Port 2000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.SystemService">
            <summary>
            System Service (AMSPORT_R3_SYSSERV, 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CTRLPROG">
            <summary>
            (Port 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSCTRL">
            <summary>
            (Port 10001)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSSAMPLER">
            <summary>
            Port 10100
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPRAWCONN">
            <summary>
            Port 10200
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPIPSERVER">
            <summary>
            Port 10201
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSMANAGER">
            <summary>
            Port 10300
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SMSSERVER">
            <summary>
            Port 10400
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MODBUSSERVER">
            <summary>
            Port 10500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_S7SERVER">
            <summary>
            Port 10600
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_PLCCONTROL">
            <summary>
            Port 10800
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCCTRL">
            <summary>
            Port 11000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCINTERPRETER">
            <summary>
            Port 11500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_STRECKECTRL">
            <summary>
            Port 12000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CAMCTRL">
            <summary>
            Port 13000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SCOPE">
            <summary>
            Port 14000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SINECH1">
            <summary>
            Port 15000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CONTROLNET">
            <summary>
            Port 16000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCSERVER">
            <summary>
            Port 17000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCCLIENT">
            <summary>
            Port 17500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.USEDEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsState">
            <summary>
            Describes the AdsState.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexGroups">
            <summary>
            Describes predefined Index-Groups.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexOffsets">
            <summary>
            Describes predefined Index-Offsets.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorCode">
            <summary>
            Describes the Ads error that occured.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoError">
            <summary>
            No Error.
            <para>Error code: 0(0x000).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InternalError">
            <summary>
            Internal Error.
            <para>Error code: 1(0x001).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoRTime">
            <summary>
            No Rtime. 
            <para>Error code: 2(0x002).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LockedMemoryError">
            <summary>
            Allocation locked memory error.
            <para>Error code: 3(0x003).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailBoxError">
            <summary>
            Insert mailbox error.
            <para>Error code: 4(0x004).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WrongHMsg">
            <summary>
            Wrong receive HMSG.
            <para>Error code: 5(0x005).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound">
            <summary>
            Target port not found.
            <para>Error code: 6(0x006).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetMachineNotFound">
            <summary>
            Target machine not found.
            <para>Error code: 7(0x007).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknownCommandID">
            <summary>
            Unknown command ID.
            <para>Error code: 8(0x008).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.BadTaskID">
            <summary>
            Bad task ID.
            <para>Error code: 9(0x009).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoIO">
            <summary>
            No IO.
            <para>Error code: 10(0x00A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknwonAmsCommand">
            <summary>
            Unknown AMS command.
            <para>Error code: 11(0x00B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.Win32Error">
            <summary>
            Win 32 error.
            <para>Error code: 12(0x00C).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortNotConnected">
            <summary>
            Port is not connected.
            <para>Error code: 13(0x00D).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsLength">
            <summary>
            Invalid AMS length.
            <para>Error code: 14(0x00E).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsNetID">
            <summary>
            Invalid AMS Net ID.
            <para>Error code: 15(0x00F).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LowInstallLevel">
            <summary>
            Low Installation level.
            <para>Error code: 16(0x010).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoDebug">
            <summary>
            No debug available.
            <para>Error code: 17(0x011).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortDisabled">
            <summary>
            Port disabled.
            <para>Error code: 18(0x012).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortConnected">
            <summary>
            Port is already connected.
            <para>Error code: 19(0x013).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncWin32Error">
            <summary>
            AMS Sync Win32 error.
            <para>Error code: 20(0x014).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.SyncTimeOut">
            <summary>
            AMS Sync timeout.
            <para>Error code: 21(0x015).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncAmsError">
            <summary>
            AMS Sync AMS error
            <para>Error code: 22(0x016).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncNoIndexMap">
            <summary>
            AMS Sync no index map.
            <para>Error code: 23(0x017).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsPort">
            <summary>
            Invalid AMS port.
            <para>Error code: 24(0x018).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoMemory">
            <summary>
            No memory.
            <para>Error code: 25(0x019).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TCPSendError">
            <summary>
            TCP send error.
            <para>Error code: 26(0x01A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.HostUnreachable">
            <summary>
            Host unreachable.
            <para>Error code: 27(0x1B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoLockedMemory">
            <summary>
            Router: no locked memory.
            <para>Error code: 1280(0x500).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailboxFull">
            <summary>
            Router: mailbox full.
            <para>Error code: 1282(0x501).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceError">
            <summary>
            error class &lt;device error"&gt;
            <para>Error code: 1792(0x700).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceServiceNotSupported">
            <summary>
            Service is not supported by server.
            <para>Error code: 1793(0x701).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidGroup">
            <summary>
            Invalid index group.
            <para>Error code: 1794(0x702).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidOffset">
            <summary>
            Invalid index offset.
            <para>Error code: 1795(0x703).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidAccess">
            <summary>
            Reading/writing not permitted.
            <para>Error code: 1796(0x704).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidSize">
            <summary>
            Parameter size not correct.
            <para>Error code: 1797(0x705).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidData">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1798(0x706).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotReady">
            <summary>
            Device is not in a ready state.
            <para>Error code: 1799(0x707).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceBusy">
            <summary>
            Device is busy.
            <para>Error code: 1800(0x708).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidContext">
            <summary>
            Invalid context (must be in Windows).
            <para>Error code: 1801(0x709).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMemory">
            <summary>
            Out of memory.
            <para>Error code: 1802(0x70a).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInavlidParam">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1803(0x70b).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotFound">
            <summary>
            Not found(files, ...).
            <para>Error code: 1804(0x70c).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSyntaxError">
            <summary>
            Syntax error in command or file.
            <para>Error code: 1805(0x70d).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceIncompatible">
            <summary>
            Objects do not match.
            <para>Error code: 1806(0x70e).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceExists">
            <summary>
            Object already exists.
            <para>Error code: 1807(0x70f).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolNotFound">
            <summary>
            Symbol not found.
            <para>Error code: 1808(0x7010).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolVersionInvalid">
            <summary>
            Symbol version is invalid.
            <para>Error code: 1809(0x711).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidState">
            <summary>
            Server is not i a valid state.
            <para>Error code: 1810(0x712).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTransModeNotSupported">
            <summary>
            ADS transmode is not supported.
            <para>Error code: 1811(0x713).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotifyHandleInvalid">
            <summary>
            Notification handle is invalid.
            <para>Error code: 1812(0x714).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceClientUnknown">
            <summary>
            Notification vlient not registered.
            <para>Error code: 1813(0x715).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMoreHandles">
            <summary>
            No more notification handles.
            <para>Error code: 1814(0x716).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidWatchsize">
            <summary>
            Size for watch to big.
            <para>Error code: 1815(0x717).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotInitialized">
            <summary>		
            Device is not initialized.
            <para>Errocr code: 1818(0x718).</para>		
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTimeOut">
            <summary>
            Devicee has a timeout.
            <para>Error code: 1817(0x719).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoInterface">
            <summary>
            Query interface has failed.
            <para>Error code: 1818(0x71A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidInterface">
            <summary>
            Wrong interface required.
            <para>Error code: 1819(0x71B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidCLSID">
            <summary>
            Class ID is invalid.
            <para>Error code: 1820(0x71C).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidObjectID">
            <summary>
            Object ID is invalid.
            <para>Error code: 1821(0x71D).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientError">
            <summary>
            Error class &lt;client error&gt;
            <para>Error code: 1856(0x740).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientInvalidParameter">
            <summary>
            Parameter at service is invalid.
            <para></para>Error code: 1857(0x741).
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientListEmpty">
            <summary>
            Polling list is empty.
            <para>Error code: 1858(0x742).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientVaraiableInUse">
            <summary>
            Variable connection is already in use.
            <para>Error code: 1859(0x743).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientDuplicateInvokeID">
            <summary>
            Invoke ID already in use.
            <para>Error code: 1860(0x744).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut">
            <summary>
            Timeout has elapsed.
            <para>Error code: 1861(x745).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientW32OR">
            <summary>
            Error in win32 subsystem.
            <para>Error code: 1862(0x746).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientTimeoutInvalid">
            <summary>
            Timeout value is invalid.
            <para>Error code: 1863(0x747).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientPortNotOpen">
            <summary>
            Ads port is not opened.
            <para>Error code: 1864(0x748).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoAmsAddr">
            <summary>
            No AMS addr. 
            <para>Error code: 1865(0x749).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncInternal">
            <summary>
            An internal in ADS sync has occured.
            <para>Error code: 1872(0x750).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientAddHash">
            <summary>
            Hash table overflow.
            <para>Error code: 1873(0x751).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientRemoveHash">
            <summary>
            There are no more symbols in the hash table.
            <para>Error code: 1874(0x752).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoMoreSymbols">
            <summary>
            There are no more symbols in cache.
            <para>Error code: 1875(0x753).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncResInvalid">
            <summary>
            An invalid response has been received.
            <para>Error code: 1876(0x754).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncPortLocked">
            <summary>
            Sync port is locked.
            <para>Error code: 1877(0x755).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientQueueFull">
            <summary>
            Client queue is full		
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcReg">
            <summary>
            This class encapsultes accesses to the TwinCAT Registry part.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameSystem">
            <summary>
            "Software\\Beckhoff\\TwinCAT\\System"
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameInstPathTc2">
            <summary>
            Installation Path (TwinCAT2) Registry Key ("InstallationPath")
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameInstPathTc3">
            <summary>
            Installation Path (TwinCAT3) Registry Key ("InstallDir")
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameCurrentVersion">
            <summary>
            Installation Path (TwinCAT3) Registry Key ("CurrentVersion")
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg._tcInstallation">
            <summary>
            TwinCAT Installation type
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg._tcInstallationPath">
            <summary>
            TwinCAT Installation path
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcReg.TryGetTwinCAT2Path(System.String@,System.Version@)">
            <summary>
            Tries to get the TwinCAT 2 Installation Path (if installed)
            </summary>
            <param name="path">The TwinCAT 2 root path.</param>
            <param name="version">The version  (TwinCAT29</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TcReg.TryGetTwinCAT3Path(System.String@,System.Version@)">
            <summary>
            Tries to get the TwinCAT 3 Installation Path (if installed)
            </summary>
            <param name="path">The TwinCAT root path.</param>
            <param name="version">The TwinCAT version.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.RootPath">
            <summary>
            Gets the root path ("Software\\Beckhoff\\TwinCAT", or "Software\\Beckhoff\\TwinCAT3")
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.LocalNetId">
            <summary>
            Gets the AmsNet ID from the Registry
            </summary>
            <value>The ams net id.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.RootTc3">
            <summary>
            Registry TwinCAT Root path (TwinCAT 3)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.IsWow64">
            <summary>
            Gets a value indicating whether this code is running within a Wow64 Process (32-Bit Processon 64-Bit Operating system)
            </summary>
            <value>
            	<c>true</c> if this instance is wow64 process; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.SystemRegKey">
            <summary> 
            Gets the SystemKey registry key (Don't forget to close the key) "HKLM\\Software\\Beckhoff\\TwinCAT\\System";
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcReg.TwinCATSubSystemType">
            <summary>
            Enumeration describes whether Tc2 or Tc3 is associated.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.None">
            <summary>
            No installation found / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.Tc2">
            <summary>
            Tc2 Installation detected
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.Tc3">
            <summary>
            Tc3 Installation detected
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationEventArgs">
            <summary>
            Provides data for AdsNotificationEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationEventArgs.#ctor(System.Int64,System.Object,System.Int32,System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="timeStamp">Timespamp.</param>
            <param name="userData">An object, that is passed by AddDeviceNotification.</param>
            <param name="notificationHandle">Handle of the connection.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="offset">The offset of the data in dataStream .</param>
            <param name="dataStream">Stream that is used to store the data.</param>		
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.TimeStamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.UserData">
            <summary>
            Gets the user object. This object is passed by to AddDeviceNotification and can 
            be used to store data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.NotificationHandle">
            <summary>
            Gets the handle of the connection.		
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.DataStream">
            <summary>
            Streams that holds the notification data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Length">
            <summary>
            Gets the Length of the data in the stream.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Offset">
            <summary>
            Gets the Offset of the data in the stream.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationExEventArgs">
            <summary>
            Provides data for AdsNotificationExEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationExEventArgs.#ctor(System.Int64,System.Object,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="timeStamp">Timestamp.</param>
            <param name="userData">An object, that is passed by AddDeviceNotificationEx.</param>
            <param name="notificationHandle">Handle of the connection.</param>
            <param name="value">Value of the ADS variable.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.TimeStamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.UserData">
            <summary>
            Gets the user object. This object is passed by to AddDeviceNotification and can 
            be used to store data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.Value">
            <summary>
            Value of the ads variable.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.NotificationHandle">
            <summary>
            Gets the handle of the connection.		
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterNotificationEventArgs">
            <summary>
            Provides data for AmsRouterNotificationEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsRouterNotificationEventArgs.#ctor(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Initializes a new instance of the AmsRouterNotificationEventArgs class.
            </summary>
            <param name="state">The current state of the Router.</param>
        </member>
        <member name="P:TwinCAT.Ads.AmsRouterNotificationEventArgs.State">
            <summary>
            Current state of the Ams Router.
            </summary>							
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationErrorEventArgs">
            <summary>
            Provides data for AdsNotificationErrorEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the AdsNotificationErrorEventArgs class.
            </summary>
            <param name="e">Exception that was caught while handling notifications.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">
            <summary>
            Exception that was caught while handling notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventArgs">
            <summary>
            Provides data for AdsStateChangedEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs.#ctor(TwinCAT.Ads.StateInfo)">
            <summary>
            Initializes a new instance of the AdsStateChangedEventArgs class.
            </summary>
            <param name="state">Current state of the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs.#ctor(TwinCAT.Ads.AdsStateChangedEventArgs)">
            <summary>
            Initializes a new instance of the AdsStateChangedEventArgs class.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs.State">
            <summary>
            Current state of the ADS device.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs">
            <summary>
            Provides data for AdsSymbolVersionChangedEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="symbolVersion">Current symbol version.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(TwinCAT.Ads.AdsSymbolVersionChangedEventArgs)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.SymbolVersion">
            <summary>
            Current symbol version device.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationEventHandler">
            <summary>
            Event handler for the AdsNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationExEventHandler">
            <summary>
            Event handler for the AdsNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterNotificationEventHandler">
            <summary>
            Event handler for the AmsRouterNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationErrorEventHandler">
            <summary>
            Event handler for the AdsNotificationError event in the class TcAdsClient.
            </summary>	
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventHandler">
            <summary>
            Event handler for the AdsStateChanged event in the class TcAdsClient.
            </summary>	
        </member>
        <member name="T:TwinCAT.Ads.TcAdsClient">
            <summary>
            The class TcAdsClient is a wrapper for the TcAdsdll.dll and enables synchronous access
            to an Ads device. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.#ctor">
            <summary>
            Initializes a new instance of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Dispose">
            <summary>
            Releases the resources used by TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:TwinCAT.Ads.TcAdsClient"/>.
            </summary>
            <param name="disposing"></param>
            <remarks>When overwritten don't forget to call the base class</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.Byte[],System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.Int32)">
            <summary>
            Establishes a connection to a ADS device using the local netID.
            </summary>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(TwinCAT.Ads.AmsAddress)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>		
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int64,System.Int64,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.		
            </summary>				
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>		
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            If the Type of the object to be read is a string type, the first element of 
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args. At the moment
            only 1 dimensional Arrays are supported.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <param name="args">Additional arguments.</param>
            <returns>The object the read data is written to.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <returns>The object the read data is written to.</returns>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int64,System.Int64,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            If the Type of the object to be read is a string type, the first element of 
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args. At the moment
            only 1 dimensional Arrays are supported.		
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <param name="args">Additional arguments.</param>
            <returns>The object the read data is written to.</returns>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int64,System.Int64,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.		 
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <returns>The object the read data is written to.</returns>						
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int64,System.Int64,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int64,System.Int64,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.		
            If the Type of the object to be written is a string type, the first element of parameter args 
            specifies the number of characters of the string.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.		
            If the Type of the object to be written is a string type, the first element of parameter args 
            specifies the number of characters of the string.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="rdOffset">Offset of the data in rdDataStream.</param>
            <param name="rdLength">Length of the data in rdDataStream.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <param name="wrOffset">Offset of the data in wrDataStream.</param>
            <param name="wrLength">Lenght of the data in wrDataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="rdOffset">Offset of the data in rdDataStream.</param>
            <param name="rdLength">Length of the data in rdDataStream.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <param name="wrOffset">Offset of the data in wrDataStream.</param>
            <param name="wrLength">Lenght of the data in wrDataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.Int64,System.Int64,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.Int64,System.Int64,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args. 
            At the moment only 1 dimensional Arrays are supported.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object s0000tored in the event argument.</param>
            <param name="args">Additional arguments.</param>		
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="variableName">Name of the ADS variable.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="variableName">Name of the ADS variable.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>		
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms. </param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.String,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="variableName">Name of the ADS variable.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>
            The handle of the notification.
            </returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>
            <remarks>
            <list type="table">
            <listheader><term><see cref="T:TwinCAT.Ads.AdsTransMode"/></term><description>Parameter semantic</description></listheader>
            <item>
                <term><see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/></term><description>Value of parameter is interpreted as task context number <see cref="P:TwinCAT.Ads.ITcAdsSymbol2.ContextMask"/></description>
            </item>
            <item>
                <term><see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/></term><description>Value of parameter is interpreted as task context number <see cref="P:TwinCAT.Ads.ITcAdsSymbol2.ContextMask"/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.String,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>		
            <param name="variableName">Name of the ADS variable.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms. </param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.DeleteDeviceNotification(System.Int32)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadDeviceInfo">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>DeviceInfo struct containing the name of the device and the version information.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteControl(TwinCAT.Ads.StateInfo,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="dataStream">Stream that contains the data that should be sent to the ADS device</param>
            <param name="offset">Offset of the data in the stream.</param>
            <param name="length">Length of the data in the stream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadState">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <returns>The ADS statue and device status.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned. 
            If the return value is equal to AdsErrorCode.NoError the call was successfull.
            </summary>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns>AdsErrorCode of the ads read state call. Check for AdsErrorCode.NoError to see if call was successfull.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateVariableHandle(System.String)">
            <summary>
            Generates a unique handle for an ADS variable.
            </summary>
            <param name="variableName">Name of the ADS variable</param>
            <returns>The handle of the ADS Variable.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.DeleteVariableHandle(System.Int32)">
            <summary>
            Releases the handle of a ADS variable again.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbolInfo(System.String)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <returns>A ITcAdsSymbol containing the requested symbol inofrmation or null if symbol could not
            be found.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateSymbolInfoLoader">
            <summary>
            Creates a new instance of the TcAdsSymbolInfoLoader class. With the help of this object one can load the symbol
            information of the ADS device.
            </summary>
            <returns>Instance of the TcAdsSymbolInfoLoader class.</returns>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateSymbolLoader">
            <summary>
            Creates a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolLoader">Symbol loader.</see>
            </summary>
            <returns>The <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolLoader"/> interface of the Symbol loader."/&gt;</returns>
            <remarks>In the first step, this method is for internal use only. </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateSymbolLoader(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolLoader">Symbol loader.</see>
            </summary>
            <param name="virtualInstance">if set to <c>true</c> virtual instances are created for non-located symbols.</param>
            <returns>
            The <see cref="T:TwinCAT.Ads.TypeSystem.ISymbolLoader"/> interface of the Symbol loader.
            </returns>
            <remarks>Virtual instances means, that all Symbols are ordered within a tree structure. For that symbol nodes that are not located on a fixed address, a Virtual Symbol will be created.
            Setting the virtualInstance parameter to 'false' means, that the located symbols will be returned in a flattened list.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbol(System.String,System.Type,System.Boolean)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="reloadSymbolInfo">If reload is true previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again.</param>
            <returns>Value of the symbol</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteSymbol(System.String,System.Object,System.Boolean)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="reloadSymbolInfo">If reload is true previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbol(TwinCAT.Ads.ITcAdsSymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object. Strings and all primitive datatypes(UInt32, Int32, Bool etc.) are supported.
            Arrays and structures cannot be read.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol as an object.</returns>
            <exception cref="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">Thrown when a ADS datatype is not supported.</exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteSymbol(TwinCAT.Ads.ITcAdsSymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive datatypes(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS datatype of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <exception cref="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">Thrown when a ADS datatype is not supported.</exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Disposed">
            <summary>
            Determines, whether the <see cref="T:TwinCAT.Ads.TcAdsClient"/> is disposed
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotification">
            <summary>
            Occurs when the Ads device sends a notification to the client.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotificationEx">
            <summary>
            Occurs when the Ads devices sends a notification to the client.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotificationError">
            <summary>
            Occurs when a exception has occured during notification management.
            </summary>		
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AmsRouterNotification">
            <summary>
            Occurs when the state of the local Router has changed. 
            </summary>				
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsStateChanged">
            <summary>
            Occurs when the ADS state changes.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsSymbolVersionChanged">
            <summary>
            Occurs when the symbol version changes.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Timeout">
            <summary>
            Sets the timeout for the ads communication. Unit is in ms.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientCycle">
            <summary>
            Gets or sets a value indicating whether the TcAdsClient object uses a client cylce for the notificatons.
            </summary>	
            <remarks>
            If ClientCycle is set to false, the ADS that has been addressed writes the data cyclically 
            to the TcAdsClient object. The smallest possible time is the cycle time of the ADS device. 
            For the PLC, this is the task cycle time. The cycle time can be handled in 1 ms steps. 
            If you enter 0 ms as the cycle time, then the data is sent to the TcAdsClient object with 
            every cycle of the ADS device task.
            If ClientCylce is set to true, the TcAdsClient object polls the variables cyclically. 
            The timer that initiates the read / write runs in Windows NT/2000 user mode, which means 
            that the time behaviour strongly depends on the loading of the system.
            </remarks>	
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Synchronize">
            <summary>
            Gets or sets a value indicating whether the TcAdsClient object synchronizes the incoming notifcations. 
            </summary>
            <remarks>
            If Synchronize is set to true, the notifications are synchronized onto the Main thread.
            This is necessary for Windows Forms projects. In Console Application this property should
            be set to false.
            </remarks>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.IsLocal">
            <summary>
            Gets a value indicating whether the ADS client is connected to a ADS Server on the local
            computer.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ServerPort">
            <summary>
            Gets the port number of the ADS server.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ServerNetID">
            <summary>
            Gets the AmsNetId of the ADS server.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientPort">
            <summary>
            Gets the port number of the ADS client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientNetID">
            <summary>
            Get the AmsNetId of the ADS client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.IsConnected">
            <summary>
            Gets a value indicating whether the local Ads port was opened successfully. It
            does not indicate if the target port is available. Use the method ReadState to
            determine if the target port is available.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.RouterState">
            <summary>
            Gets the current state of the local AMS router.
            </summary>		
        </member>
        <member name="T:TwinCAT.Ads.ITcAdsSymbol">
            <summary>
            Defines an Interface for reading the ADS symbol information.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="T:TwinCAT.Ads.ITcAdsSymbol2">
            <summary>
            Defines an interface for reading the additional flags-information of an ADS symbol.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsPersistent">
            <summary>
            Indicates if the Persitent flag is set for the symbol.
            </summary>
            <value><c>true</c> if persistent, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsBitValue">
            <summary>
            Indicates if the BitValue flag is set for the symbol.
            </summary>
            <value><c>true</c> if is BitValue, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsReference">
            <summary>
            Indicates if the ReferenceTo flag is set for the symbol.
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsPointer">
            <summary>
            Gets a value indicating whether this instance is pointer.
            </summary>
            <value>
            <c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsTypeGuid">
            <summary>
            Indicates if the TypeGuid flag is set for the symbol.
            </summary>
            <value><c>true</c> if is TypeGuid, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsReadOnly">
            <summary>
            Indicates if the ReadOnly flag is set for the symbol.
            </summary>
            <value><c>true</c> if ReadOnly, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.IsTcComInterfacePointer">
            <summary>
            Indicates if the TcComInterfacePointer flag is set for the symbol.
            </summary>
            <value><c>treu</c> if is TcComInterfacePointer, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol2.ContextMask">
            <summary>
            Gets the ContextMask of the symbol, indicating the task the variable belongs to.
            If ContextMask is not zero use <see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/> or <see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/> to add notifications.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.TcAdsSymbol.GetManagedType">
            <summary>
            Gets the corresponding managed type of this symbol. This only works for
            primitive types.
            </summary>
            <returns>Managed type of symbol.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsPersistent">
            <summary>
            Indicates if the Persitent flag is set for the symbol.
            </summary>
            <value><c>true</c> if persistent, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsBitValue">
            <summary>
            Indicates if the BitValue flag is set for the symbol.
            </summary>
            <value><c>true</c> if is BitValue, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsPointer">
            <summary>
            Gets a value indicating whether this instance is pointer.
            </summary>
            <value>
            	<c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsReference">
            <summary>
            Indicates if the ReferenceTo flag is set for the symbol.
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsTypeGuid">
            <summary>
            Indicates if the TypeGuid flag is set for the symbol.
            </summary>
            <value><c>true</c> if is TypeGuid, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsReadOnly">
            <summary>
            Indicates if the ReadOnly flag is set for the symbol.
            </summary>
            <value><c>true</c> if ReadOnly, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IsTcComInterfacePointer">
            <summary>
            Indicates if the TcComInterfacePointer flag is set for the symbol.
            </summary>
            <value><c>treu</c> if is TcComInterfacePointer, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.ContextMask">
            <summary>
            Gets the ContextMask of the symbol, indicating the task the variable belongs to.
            If ContextMask is not zero use <see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/> or <see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/> to add notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsDatatypeId">
            <summary>
            ADS data types.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfoCollection">
            <summary>
            Represents a collection of TcAdsSymbolInfo objects.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through ths symbols in this collection.
            </summary>
            <returns>
            An <c>IEnumerator</c> that can be used to iterate through all symbols in this collection.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">
            The one-dimensional <c>Array</c> that is the destination of the 
            elements copied from the collection. The 
            <c>Array</c> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.Count">
            <summary>
            Gets the number of elements 
            contained in the collection.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether 
            access to the collection is synchronized 
            (thread-safe).
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to 
            synchronize access to the collection.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfo">
            <summary>
            The class TcAdsSymbolInfo represents a symbol loaded by an instance of the TcAdsSymbolInfoLoader class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfo.TryGetPointerRef(System.String@)">
            <summary>
            Gets the Base data type of the pointer (the referenced type)
            </summary>
            <param name="referencedType">Type of the reference.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfo.TryGetReference(System.String@)">
            <summary>
            Gets the referenced data type of the reference.
            </summary>
            <param name="referencedType">Type of the referenced.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Parent">
            <summary>
            Gets the parent of this symbol.
            </summary>
            <value>Parent of this symbol</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.NextSymbol">
            <summary>
            Gets the next sibling of this symbol.
            </summary>
            <value>Next sibling of this symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.FirstSubSymbol">
            <summary>
            Gets the next sub symbol of this symbol.
            </summary>
            <value>Next sub symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.SubSymbols">
            <summary>
            Gets the sub symbols of this symbol as a collection of TcAdsSymbolInfo objects. 
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.SubSymbolCount">
            <summary>
            Gets the number of sub symbols.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.ShortName">
            <summary>
            Gets the name of the symbol (short form without prefixed names of the parents).
            </summary>
            <value>Full name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsPointer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.TcAdsSymbolInfo"/> is a pointer.
            </summary>
            <value>
            <c>true</c> if this instance is pointer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsPersistent">
            <summary>
            Indicates if the Persitent flag is set for the symbol.
            </summary>
            <value><c>true</c> if persistent, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsBitValue">
            <summary>
            Indicates if the BitValue flag is set for the symbol.
            </summary>
            <value><c>true</c> if is BitValue, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsReference">
            <summary>
            Indicates if the ReferenceTo flag is set for the symbol.
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsTypeGuid">
            <summary>
            Indicates if the TypeGuid flag is set for the symbol.
            </summary>
            <value><c>true</c> if is TypeGuid, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsReadOnly">
            <summary>
            Indicates if the ReadOnly flag is set for the symbol.
            </summary>
            <value><c>true</c> if ReadOnly, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IsTcComInterfacePointer">
            <summary>
            Indicates if the TcComInterfacePointer flag is set for the symbol.
            </summary>
            <value><c>treu</c> if is TcComInterfacePointer, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.ContextMask">
            <summary>
            Gets the ContextMask of the symbol, indicating the task the variable belongs to.
            If ContextMask is not zero use <see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/> or <see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/> to add notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfoLoader">
            <summary>
            The class TcAdsSymbolInfoLoader is responsible for downloading the list of declared variables from an ADS Server.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetSymbols(System.Boolean)">
            <summary>
            Loads the declared symbols from the ADS device and returns them as a collection of TcAdsSymbolInfo objects. 
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>A collection of TcAdsSymbolInfo objects</returns>
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            <p><b>Note about the  PLC:</b> Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. </p>
            <p><b>Note about NC:</b> The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</p></remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through all symbols.
            </summary>
            <returns>
            An <c>IEnumerator</c> that can be used to iterate through all symbols.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.FindSymbol(System.String)">
            <summary>
            Call this method to find a symbol in the list.
            </summary>
            <param name="name">Name of the symbol</param>
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            <p><b>Note about the  PLC:</b> Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. </p>
            <p><b>Note about NC:</b> The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</p></remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetSymbolCount(System.Boolean)">
            <summary>
            Call this method to get the number of declared symbols.
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>Returns the number of symbols.</returns>		
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            Note about the  PLC: Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. 
            Note about NC: The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</remarks>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetFirstSymbol(System.Boolean)">
            <summary>
            Call this method to get the first symbol.
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>Returns the first symbol or null if no symbols are available.</returns>		
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            Note about the  PLC: Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. 
            Note about NC: The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsTrace">
            <summary>
            Summary description for Trace.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeCategory">
            <summary>
            Category of a DataType / Instance
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Unknown">
            <summary>
            Uninitialized / NotProcessed (0)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.None">
            <summary>
            Uninitialized / NotProcessed (0)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Primitive">
            <summary>
            Simple / Base Data Type (1)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Alias">
            <summary>
            Alias data type (2)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Enum">
            <summary>
            Enumeration data type (3)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Array">
            <summary>
            Array data type (4)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Struct">
            <summary>
            Structure data type (5)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock">
            <summary>
            Function block (POU) (6)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Program">
            <summary>
            Program (POU) (7)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Function">
            <summary>
            Function (POU) (8)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.SubRange">
            <summary>
            SubRange (9)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.String">
            <summary>
            Fixed length string (10)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Bitset">
            <summary>
            Bitset (12)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer">
            <summary>
            Pointer type (13)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Union">
            <summary>
            Union type (14)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Reference">
            <summary>
            Reference type (15)
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValueSymbol">
            <summary>
            Interface for a <see cref="T:TwinCAT.TypeSystem.ISymbol"/> that supports values.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueSymbol.HasValue">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has a value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks>A VirtualSymbol does not support values, but in terms of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> definition, is a <see cref="T:TwinCAT.TypeSystem.ISymbol"/></remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueSymbol.RawValue">
            <summary>
            Gets or sets the raw value of the Symbol (Ads Read / Write)
            </summary>
            <value>The raw value.</value>
        </member>
        <member name="E:TwinCAT.TypeSystem.IValueSymbol.RawValueChanged">
            <summary>
            Occurs when the Value of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> has changed.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.RawValueChangedArgs">
            <summary>
            Event args for the <see cref="E:TwinCAT.TypeSystem.IValueSymbol.RawValueChanged"/> event.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RawValueChangedArgs.#ctor(TwinCAT.TypeSystem.ISymbol,System.Object,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RawValueChangedArgs"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="timeStamp">Time steamp in ?Ticks</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.RawValueChangedArgs.Value">
            <summary>
            New Value (Primitive type or byte[])
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RawValueChangedArgs.Symbol">
            <summary>
            Symbol that caused the event.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RawValueChangedArgs._timeStamp">
            <summary>
            FileTime of changed event in Ticks
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.RawValueChangedArgs.UtcTime">
            <summary>
            Gets the UTC Time of the Event
            </summary>
            <value>The UTC time.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ValueChangedArgs">
            <summary>
            Event args for the <see cref="E:TwinCAT.Ads.TypeSystem.Symbol.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ValueChangedArgs.#ctor(TwinCAT.TypeSystem.IDynamicSymbol,System.Object,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ValueChangedArgs"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="timeStamp">The time stamp.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedArgs.Value">
            <summary>
            New Value (Late bound, dynamic object, >= NET4)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedArgs.Symbol">
            <summary>
            Symbol that caused the event.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedArgs._timeStamp">
            <summary>
            FileTime of changed event in Ticks
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ValueChangedArgs.UtcTime">
            <summary>
            Gets the UTC Time of the Event
            </summary>
            <value>The UTC time.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DynamicValue">
            <summary>
            Dynamic value (uses RuntimeBinding for <see cref="T:TwinCAT.TypeSystem.ISymbol"/> value reading / writing).
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DynamicValue._symbol">
            <summary>
            Symbol that is bound to this value.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.#ctor(TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DynamicValue"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.#ctor(TwinCAT.Ads.TypeSystem.Symbol,System.Byte[],System.Int32,TwinCAT.Ads.TypeSystem.DynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DynamicValue"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="offset">RawData Offset</param>
            <param name="parentValue">The parent value.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/>[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.ReadArrayElement(System.Int32[])">
            <summary>
            Reads the specified array element.
            </summary>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.ReadMember(TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Reads the specified member element.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.WriteMember(TwinCAT.Ads.TypeSystem.Symbol,System.Object)">
            <summary>
            Writes the specified member element.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/>[0] is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DynamicValue.WriteArrayElementCached(System.Int32[],System.Object)">
            <summary>
            Writes the array element value into the cache.
            </summary>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicValue.Symbol">
            <summary>
            Gets the symbol that is bound to this value.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DynamicValue.RootValue">
            <summary>
            Gets the root value.
            </summary>
            <value>The root value.</value>
            <remarks>The root value is the value, that is active in terms of ADS communication, the object that requests the data. All subsequent
            childs are working on the <see cref="P:TwinCAT.Ads.TypeSystem.DynamicValue.RootValue"/>s cache.</remarks>
        </member>
    </members>
</doc>
